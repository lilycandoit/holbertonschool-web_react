/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

// create students list based on interface
var student1 = {
    firstName: 'Lily',
    lastName: 'Smith',
    age: 22,
    location: 'New York',
};
var student2 = {
    firstName: 'Bob',
    lastName: 'Bee',
    age: 25,
    location: 'London',
};
var studentsList = [student1, student2];
// test in console.log
// studentsList.forEach((student) => {
//     console.log(`Student: ${student.firstName} ${student.lastName}, Age: ${student.age}, Location: ${student.location}`)
// })
// Using Vanilla Javascript, render a table and for each elements in the array, append a new row to the table
// Reusable function to apply common styles to table elements
function applyTableCellStyle(element) {
    element.style.border = '1px solid black';
    element.style.padding = '8px';
    element.style.textAlign = 'center';
}
// create the table
var table = document.createElement('table');
var header = document.createElement('tr');
var nameHeader = document.createElement('th');
nameHeader.textContent = 'First Name';
applyTableCellStyle(nameHeader);
var locationHeader = document.createElement('th');
locationHeader.textContent = 'Location';
applyTableCellStyle(locationHeader);
header.appendChild(nameHeader);
header.appendChild(locationHeader);
table.appendChild(header);
// create rows
studentsList.forEach(function (student) {
    var row = document.createElement('tr');
    var nameCell = document.createElement('td');
    nameCell.textContent = student.firstName;
    applyTableCellStyle(nameCell);
    var locationCell = document.createElement('td');
    locationCell.textContent = student.location;
    applyTableCellStyle(locationCell);
    row.appendChild(nameCell);
    row.appendChild(locationCell);
    table.appendChild(row);
});
// append table to the document body
document.body.appendChild(table);

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQVFBLDBDQUEwQztBQUMxQyxJQUFNLFFBQVEsR0FBWTtJQUN4QixTQUFTLEVBQUUsTUFBTTtJQUNqQixRQUFRLEVBQUUsT0FBTztJQUNqQixHQUFHLEVBQUUsRUFBRTtJQUNQLFFBQVEsRUFBRSxVQUFVO0NBQ3JCLENBQUM7QUFFRixJQUFNLFFBQVEsR0FBWTtJQUN4QixTQUFTLEVBQUUsS0FBSztJQUNoQixRQUFRLEVBQUUsS0FBSztJQUNmLEdBQUcsRUFBRSxFQUFFO0lBQ1AsUUFBUSxFQUFFLFFBQVE7Q0FDbkIsQ0FBQztBQUVGLElBQU0sWUFBWSxHQUFjLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBRXJELHNCQUFzQjtBQUN0QixzQ0FBc0M7QUFDdEMsMkhBQTJIO0FBQzNILEtBQUs7QUFFTCw2R0FBNkc7QUFFN0csNkRBQTZEO0FBQzdELFNBQVMsbUJBQW1CLENBQUMsT0FBb0I7SUFDL0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLENBQUM7SUFDekMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQzlCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUNyQyxDQUFDO0FBRUQsbUJBQW1CO0FBQ25CLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUMsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELFVBQVUsQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQ3RDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRWhDLElBQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEQsY0FBYyxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFDeEMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFcEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMvQixNQUFNLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ25DLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFMUIsY0FBYztBQUNkLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO0lBQzNCLElBQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxRQUFRLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDekMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFOUIsSUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRCxZQUFZLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDNUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFbEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQixHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzlCLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxvQ0FBb0M7QUFDcEMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90eXBlc2NyaXB0X2RlcGVuZGVuY2llcy8uL2pzL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlIGludGVyZmFjZVxuaW50ZXJmYWNlIFN0dWRlbnQge1xuICBmaXJzdE5hbWU6IHN0cmluZztcbiAgbGFzdE5hbWU6IHN0cmluZztcbiAgYWdlOiBudW1iZXI7XG4gIGxvY2F0aW9uOiBzdHJpbmc7XG59XG5cbi8vIGNyZWF0ZSBzdHVkZW50cyBsaXN0IGJhc2VkIG9uIGludGVyZmFjZVxuY29uc3Qgc3R1ZGVudDE6IFN0dWRlbnQgPSB7XG4gIGZpcnN0TmFtZTogJ0xpbHknLFxuICBsYXN0TmFtZTogJ1NtaXRoJyxcbiAgYWdlOiAyMixcbiAgbG9jYXRpb246ICdOZXcgWW9yaycsXG59O1xuXG5jb25zdCBzdHVkZW50MjogU3R1ZGVudCA9IHtcbiAgZmlyc3ROYW1lOiAnQm9iJyxcbiAgbGFzdE5hbWU6ICdCZWUnLFxuICBhZ2U6IDI1LFxuICBsb2NhdGlvbjogJ0xvbmRvbicsXG59O1xuXG5jb25zdCBzdHVkZW50c0xpc3Q6IFN0dWRlbnRbXSA9IFtzdHVkZW50MSwgc3R1ZGVudDJdO1xuXG4vLyB0ZXN0IGluIGNvbnNvbGUubG9nXG4vLyBzdHVkZW50c0xpc3QuZm9yRWFjaCgoc3R1ZGVudCkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKGBTdHVkZW50OiAke3N0dWRlbnQuZmlyc3ROYW1lfSAke3N0dWRlbnQubGFzdE5hbWV9LCBBZ2U6ICR7c3R1ZGVudC5hZ2V9LCBMb2NhdGlvbjogJHtzdHVkZW50LmxvY2F0aW9ufWApXG4vLyB9KVxuXG4vLyBVc2luZyBWYW5pbGxhIEphdmFzY3JpcHQsIHJlbmRlciBhIHRhYmxlIGFuZCBmb3IgZWFjaCBlbGVtZW50cyBpbiB0aGUgYXJyYXksIGFwcGVuZCBhIG5ldyByb3cgdG8gdGhlIHRhYmxlXG5cbi8vIFJldXNhYmxlIGZ1bmN0aW9uIHRvIGFwcGx5IGNvbW1vbiBzdHlsZXMgdG8gdGFibGUgZWxlbWVudHNcbmZ1bmN0aW9uIGFwcGx5VGFibGVDZWxsU3R5bGUoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgZWxlbWVudC5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkIGJsYWNrJztcbiAgZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzhweCc7XG4gIGVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG59XG5cbi8vIGNyZWF0ZSB0aGUgdGFibGVcbmNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbmNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5jb25zdCBuYW1lSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbm5hbWVIZWFkZXIudGV4dENvbnRlbnQgPSAnRmlyc3QgTmFtZSc7XG5hcHBseVRhYmxlQ2VsbFN0eWxlKG5hbWVIZWFkZXIpO1xuXG5jb25zdCBsb2NhdGlvbkhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG5sb2NhdGlvbkhlYWRlci50ZXh0Q29udGVudCA9ICdMb2NhdGlvbic7XG5hcHBseVRhYmxlQ2VsbFN0eWxlKGxvY2F0aW9uSGVhZGVyKTtcblxuaGVhZGVyLmFwcGVuZENoaWxkKG5hbWVIZWFkZXIpO1xuaGVhZGVyLmFwcGVuZENoaWxkKGxvY2F0aW9uSGVhZGVyKTtcbnRhYmxlLmFwcGVuZENoaWxkKGhlYWRlcik7XG5cbi8vIGNyZWF0ZSByb3dzXG5zdHVkZW50c0xpc3QuZm9yRWFjaCgoc3R1ZGVudCkgPT4ge1xuICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICBjb25zdCBuYW1lQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gIG5hbWVDZWxsLnRleHRDb250ZW50ID0gc3R1ZGVudC5maXJzdE5hbWU7XG4gIGFwcGx5VGFibGVDZWxsU3R5bGUobmFtZUNlbGwpO1xuXG4gIGNvbnN0IGxvY2F0aW9uQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gIGxvY2F0aW9uQ2VsbC50ZXh0Q29udGVudCA9IHN0dWRlbnQubG9jYXRpb247XG4gIGFwcGx5VGFibGVDZWxsU3R5bGUobG9jYXRpb25DZWxsKTtcblxuICByb3cuYXBwZW5kQ2hpbGQobmFtZUNlbGwpO1xuICByb3cuYXBwZW5kQ2hpbGQobG9jYXRpb25DZWxsKTtcbiAgdGFibGUuYXBwZW5kQ2hpbGQocm93KTtcbn0pO1xuXG4vLyBhcHBlbmQgdGFibGUgdG8gdGhlIGRvY3VtZW50IGJvZHlcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGFibGUpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9